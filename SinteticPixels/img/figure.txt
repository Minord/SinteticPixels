
If you are readding this text probabily is best ignore this, is a
messing file for figure out the posible solutions for the problems in
this module

#this is the image module of the proyect the propourse of this module
#is create classes for handle the img types. basic image operations

#well i have to descrive firts is the psilosofy of this modole gona be.

#give a object what can be use for representate images and their information


#What are the general capabilities?

#	GET A GENERAL OBJECT TO REPRESENT ANY IMAGE.

#	CREATE A UNIVERSAL FUCTIONS FOR OPERATE OVER 
#	IMG DATA IN ANY IMAGE TYPE WITH THE IMG TYPE LIMITS
#	-SUM IMAGES.
#	-MULTIPY IMAGES BY AN SCALAR.
#	-ALL NUMPY FUCTIONS.
#	-FOR LOOPS x, y information.
#	define it more.

#	CAN TRANSLATE ANY IMAGE TYPE TO ANOTHER EFICIENTLY

#	CAN SAVE AND LOAD THE IMGS EASILY

#create a type img object with the convercion protocols
#and the rules folowing by they for some operations.


####### new goals

#give a way to registry a convertion prosses

#give a way to execute  any function in program

#give a way to execute any numpy fuction

#prosses beetween 2 images a return tpye of course.

#give a way to know exactly what kind of img i have






#img buffer - a collections of images.
	#all the images are the same

#img object
	#header
	#data

	#load
	#save

#basic operations


	#updatepixels() it update a set of pixels whith defined cordinates.

#  //this object represents the propierties of the image.
#header object
	#name
	#color_type.
	#has alpha channel.
	#scales of pixels.
	#dtype of pixels.
	#color chanels.
	#color space.

	#int
	#float
	#bool

	#tags.

#data object
	#size
	#dtype
		
	#update pixels()
	#execute_np_fuction()

#convetion methods.
	#convertions into img types.


#for example this declarations if here can help mor make my code more 


#convetion FUCTIONS
#for each type of image is needed declare 2 functions (IMG_TYPE)_to_conv and conv_to_(IMG_TYPE)



#cython and numpy can help
#we have a buffer procol in python wtf

#shape
#ndim
#dtype

#this are convencional names 

#what up if i abandone the numpy well i dont think it
#but for practice i have to try to create this posibility


#well maybe is a good plan do someting like cython code for 
the main loops well now i have a best focus for improve the 
performace of the this code.

Convolution.
Brush.
PixperPix
fuction with cord information.

for example the convolution

#kernel.
#matrix.

	for float
	for int

-- another folder
	--fastfuctions
		
		#this fucntions works with 3 dim MxNx(1-n)
		#formal conv
		-conv()

		#operator with
		-in_pixels_func()

		-fuction_for_ponderate_pixels()
		-fuction_for_modified_pixels()

		#for int
		#for float
		#for boolean

-- manage this fuctions

	hanle_more_general_fuction

	get_cords(func):
	set_cords(func):

#the firts step is do that for numpy based numpy
#and test this
#after implement the cython based loops

some fuctions what are so complex like the folowwing gradient algorimth
and i dont know if i can halde this prosses with that

bueno entonces que deberia de hacer con las fucciones si es cierto que he de reunir
las condiciones en las que voy a ordenar las operaciones que es practicamente
lo que estado haciendo pero lo que quiero es poder encapsular el tema de los
prosesos y ademas el tema de los tipos y los array y las operaciones de todo esta 
shiit

entonces el problema que la complejidad de resolver este problema por el hecho
de cuantas variables esto implica esto genera que tenga que pensar en solucciones
que no son las mejores pero bueno supongamos que quiero enfocarme en diseï¿½ar la
parte de las operaciones como podria hacer esto Mmmmmm

Primero esto tiene que ir enfocado un poco a unas fucciones de cython y ademas
tendre que tener codigo complilado en este sistema hee esto podria ser un problema
para mi problema hee. bueno entonces lo que quiero al final es otra cuestion
por ejemplo tengo definido en el area de operacciones que simplemente se aran
e implementaran con numpy arrays.

Bueno entonces haora que tendria que hacer primero seria un poco nesesario 
implementar estas fucciones en python puro y luego exportalas a otros formatos e
entonces supongamos que tenemos un diccionario de funciones o mejor dicho las
las funciones generales bueno entonces como podria adaptar estas fucciones a otros
si entonces lo bueno seria definir los tipos con los que trabajaran ls operaciones


estos tipos son:

#estos 3 son los unicos tipos que soporta las operaciones.

int
float
bool

#bueno entonces tengo estos tipos de datos que soportare desde mis fucciones de 
operaciones.

#luego como hago para estruccturar si esto se hara con funcciones de cython
o de pyhon preferiblemente esto tiene que ser con una sola parabra.
	-Este es un problema a resolver.

#luego como hago para que las fucciones de distintos tipos se separen.
en realidad no importa lo unico que importa realmente es que se declaren como
tales como int float o boolean.

#que tipo de operaciones implementare de las fucciones bassicas tambien es cierto
que he de definir varios prosesos que se puedan hacer para crear estas funciones.

#la pregunta como puedo crear estos wrappers para python si perder eficiencia
por ejemplo en 

bueno entonces hare simplemente tratar de recrear estas fucciones en cython
pero pararece que va a ser un poco complicado por el echo de que hay que 
complilar c y cosas que tienen que ver con el sistema operativo diria.

Que sentido tiene crear clases para los metodos de cada tipo de numpy array
Mmmm bueno no seria mala idea buscar estos algoritmos en librerias de terceros
pero es que estas no dan accseso a niveles basicos de la informaccion.
como hacer esta implementaciones heee es que esta dificil el problema





#weno weno weno y haora como hago para tratar de hacer una fuccion eficiento
para estampar pratrones pues claro tengo 

Entradas

imagen a estampar

Brush

Pivot Brush 

stamp point.

primero esto es un estampado podria decir que simplemente se remplazaran valores
donde se indique donde es que se van a remplazar los valores y ademas porque valoeres
se van a remplazar por ejemploo podria poner la regla de que si el valor en la matrix stampar
es 0 entonce no modifique el pixel aunque este tenga presisamente esto Mmmm como podria hacer esto
aplicar un mask a el estampado MMmmm curioso

Pero no seria mejor a partir del estampado generar algun diccionario con los indices que se modificaran
y los valores que se asignaran no lo veo como una mala idea pero que pasaria si quisiera utilizar esta funcionesde

demaciadas veces eso no seria lento pues tendria que generar bucles for no

[3,1,2],[3,5,3],[4,3,2]

O a  lo mejor en lugar de un diccionario de numpy hacer lo con un array de numpy con [1,3] dimenciones
con el que tendra unas seldas hee pues podria fuccionar muy muy bien

#THIS IS A USELESS FUCTION BY NOW 
def calculate_pixels_indexes(brush, brush_pivot, stamp_point, img_bounds):
	"""
	By given a brush and it pivot or origin. calculate in fuction of the stamp point tuple and also contemplating
	the bounds of image to stamp. it calculate a numpy array with a shape of (n, 3) where n is the num
	of pixels. indexing in n return a 3-vector and it values represent [y, x, value] y and x represent
	the pixel to modify and the value
	is the new pixel value.

	Note: if a original brush pixel is 0 it pixels is not going to be indexed in pixels list.
	"""
	brush_pixels_amount = brush.size #get the number of pixels of brush

	brush_height, brush_width = brush.shape

	pixels_list = np.zeros((brush_pixels_amount, 3))

	pixels_counter = 0

	for x in range(brush_width):
		for y in range(brush_height):

			#NOTE DEV: i have to check the bounds of img
			#withd an if is a good idea Mmm i really dont know

			if brush[y, x] == 0:
				#adding new pixel information
				pixels_list[pixels_counter, :] = np.array([y, x, brush[y, x]], dtype = float)
				#incrementing the pixels counter
				pixels_counter += 1

	#reduce de size of pixels deleting void vectors
	pixels_list = pixels_list[0 : pixels_counter,:]  #NOTE: maybe i have sum 1 to pixels counter Mmmm
	
	return pixels_list





Metodos para arrays 2d con float o int

	def sum(self, ndarray1, ndarray2):
		pass
	
	def diference(self, ndarray1, ndarray2):
		pass

	def multiply(self, ndarray1, ndarray2):
		pass

	def division(self, ndarray1, ndarray2):
		pass

Metodos para arrays booleanos

	def convolution(self, ndarray, kernel):
		pass

	def stamp(self, ndarray, brush):
		pass

	#operations with 2 ndarrays
	def union(self, ndarray1, ndarray2):
		pass

	def interception(self, ndarray1, ndarray2):
		pass

	def diference(self, ndarray1, ndarray2):
		pass



